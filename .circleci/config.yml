version: 2.1


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.9.16-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:

  destroy_environment:
    description: Destroy Cloud Formation Stacks and Infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend cfn stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: << parameters.when >>


jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install backend
          working_directory: ./backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install frontend
          working_directory: ./frontend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build backend
          working_directory: ./backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  build-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build frontend
          working_directory: ./frontend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./backend/test_results
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: ./frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: ./frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit && pwd && ls -la /tmp
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./test_results
      - store_test_results:
          path: ./frontend/test_results
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

#  scan-backend:
#    executor: node
#    steps:
#      - checkout
#      - attach_workspace:
#          at: .
#      - run:
#          name: Check Backend against security vulnerabilities
#          working_directory: ./backend
#          command: npm audit fix --force && npm audit fix --force && npm audit --audit-level=critical
#
#  scan-frontend:
#    executor: node
#    steps:
#      - checkout
#      - attach_workspace:
#          at: .
#      - run:
#          name: Check Frontend against security vulnerabilities
#          working_directory: ./frontend
#          command: npm install && npm audit fix --force && npm audit fix --force && npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip # required for the persist_to_workspace
      - attach_workspace:
          at: .
      - run:
          name: Deploy Backend Infrastructure
          working_directory: .circleci/files
          command: |
            ls -la ../../backend
            ls -la ../../frontend
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          working_directory: .circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: .circleci/ansible
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            
            echo $BACKEND_IP >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
            - backend/dist
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-server:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e0:bd:8d:88:d7:8f:9d:c2:5f:6d:c5:cd:da:22:30:9a"]
      - attach_workspace:
          at: .
      - run:
          name: Install Ansible
          working_directory: .circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip install awscli
      - run:
          name: Configure server
          working_directory: .circleci/ansible
          command: ansible-playbook -i inventory configure-server.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            la -la
            npm install
            npm run migrations > migration_status
            cat migration_status
      - persist_to_workspace:
          root: .
          paths:
            - backend/migration_status
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e0:bd:8d:88:d7:8f:9d:c2:5f:6d:c5:cd:da:22:30:9a"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          working_directory: .circleci/ansible
          command: |
            ls -la
            ls -la ../../backend/
            ansible-playbook -i inventory deploy-server.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-backend:
          requires:
            - install-backend-dependencies
      - build-frontend:
          requires:
            - install-frontend-dependencies
      - test-backend:
          requires:
            - build-backend
      - test-frontend:
          requires:
            -  build-frontend
#      - scan-backend:
#          requires:
#            - build-backend
#      - scan-frontend:
#          requires:
#            - build-frontend

      - deploy-infrastructure:
          filters:
            branches:
              only:
                - main
#      - configure-server:
#          filters:
#            branches:
#              only:
#                - main
#          requires:
#            - deploy-infrastructure
#      - run-migrations:
#          requires:
#            - test-backend
#            - test-frontend
#            - scan-backend
#            - scan-frontend
#            - configure-server
#          filters:
#            branches:
#              only:
#                - main
      - deploy-backend:
          filters:
            branches:
              only:
                - main
          requires:
            - deploy-infrastructure