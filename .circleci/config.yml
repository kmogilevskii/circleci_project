version: 2.1


executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.10.0-alpine
  aws:
    docker:
      - image: amazon/aws-cli

commands:

  destroy_environment:
    description: Destroy Cloud Formation Stacks and Infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy Udapeople Backend CFN Stack
          command: aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend cfn stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Revert migrations
          working_directory: backend
          command: |
            SUCCESS=$(aws secretsmanager get-secret-value --secret-id udacity-migration-status | jq .SecretString | tr -d \")
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              npm run migrations:revert
            fi
          when: << parameters.when >>

jobs:

  install-backend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install backend
          working_directory: backend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
    executor: node
    steps:
      - checkout
      - run:
          name: npm install frontend
          working_directory: frontend
          command: npm install
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  build-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: npm run build backend
          working_directory: backend
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: backend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: backend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: test_results
      - store_test_results:
          path: backend/test_results

  test-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install junit coverage reporter
          working_directory: frontend
          command: npm install --save-dev jest-junit
      - run:
          name: Run tests with JUnit as reporter
          working_directory: frontend
          command: npm test -- --ci --runInBand --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: test_results
      - store_test_results:
          path: frontend/test_results

  scan-backend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Backend against security vulnerabilities
          working_directory: backend
          command: npm install && npm audit fix --audit-level=critical --force &&  npm audit fix --audit-level=critical --force && npm audit --audit-level=critical

  scan-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check Frontend against security vulnerabilities
          working_directory: frontend
          command: npm install && npm audit fix --audit-level=critical --force &&  npm audit fix --audit-level=critical --force && npm audit --audit-level=critical

  deploy-infrastructure:
    executor: aws
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip # required for the persist_to_workspace
      - run:
          name: Deploy Backend Infrastructure
          working_directory: .circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Deploy frontend infrastructure
          working_directory: .circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to ansible inventory
          working_directory: .circleci/ansible
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            
            echo $BACKEND_IP >> inventory
            cat inventory
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          working_directory: backend
          command: |
            npm install
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Send migration results to AWS Secret Manager
          working_directory: backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update AWS Secret Manager..."
              aws secretsmanager put-secret-value --secret-id udacity-migration-status --secret-string "success"
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              aws secretsmanager put-secret-value --secret-id udacity-migration-status --secret-string "failure"
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          when: on_fail

  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e0:bd:8d:88:d7:8f:9d:c2:5f:6d:c5:cd:da:22:30:9a"]
      - attach_workspace:
          at: .
      - run:
          name: Install Dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm jq
            pip install awscli
      - run:
          name: Configure Server
          working_directory: .circleci/ansible
          command: ansible-playbook -i inventory configure-server.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          when: on_fail

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["e0:bd:8d:88:d7:8f:9d:c2:5f:6d:c5:cd:da:22:30:9a"]
      - attach_workspace:
          at: .
      - run:
          name: Install Dependencies
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm jq
            pip install awscli
      - run:
          name: Deploy Backend
          working_directory: .circleci/ansible
          command: |
            tar -C ../../backend -czvf backend-artifact.tar.gz .
            ansible-playbook -i inventory deploy-server.yml -vv
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          when: on_fail

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less jq
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Build frontend with backend API Url
          working_directory: frontend
          command: |
            export BACKEND_IP=$(sed -n '2p' ../.circleci/ansible/inventory)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo "${API_URL}" >> .env
            cat .env
            pwd
            ls -la
            npm install
            npm run build
      - run:
          name: Deploy frontend objects to S3
          working_directory: frontend
          command: aws s3 cp dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          when: on_fail

  smoke-test:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm jq
            pip install awscli
      - run:
          name: Backend smoke test.
          working_directory: backend
          command: |
            export BACKEND_IP=$(sed -n '2p' ../.circleci/ansible/inventory)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          working_directory: backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com/index.html"
            echo $URL
            curl -s ${URL} | grep -q "Welcome"
      - revert_migrations:
          when: on_fail
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cloudfront-update:
    executor: aws
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          working_directory: .circleci/files
          command: |
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name udapeople-cloudfront-production \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

  cleanup:
    executor: aws
    steps:
      - checkout
      - run:
          name: Clean up old environment
          command: |
            yum install -y jq
            OldWorkflowID=$(aws secretsmanager get-secret-value --secret-id udacity-circleci-project | jq .SecretString | tr -d \")
            echo $OldWorkflowID
            CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}
            echo $CurrentWorkflowID

            if [[ "$CurrentWorkflowID" != "$OldWorkflowID" ]]
            then
              echo "$OldWorkflowID!=$CurrentWorkflowID => will delete old version"
              aws secretsmanager put-secret-value --secret-id udacity-circleci-project --secret-string "$CurrentWorkflowID"
            
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi

workflows:
  default:
    jobs:
#      - install-backend-dependencies
#      - install-frontend-dependencies
#
#      - build-backend:
#          requires:
#            - install-backend-dependencies

#      - test-backend:
#          requires:
#            - build-backend
#      - test-frontend:
#          requires:
#            - install-frontend-dependencies
#
#      - scan-backend:
#          requires:
#            - test-backend
#      - scan-frontend:
#          requires:
#            - test-frontend

      - deploy-infrastructure:
          filters:
            branches:
              only:
                - main
#          requires:
#            - build-backend
#            - install-frontend-dependencies

      - run-migrations:
          requires:
            - deploy-infrastructure
#      - configure-infrastructure:
#          requires:
#            - deploy-infrastructure
#      - deploy-backend:
#          requires:
#            - configure-infrastructure
#      - deploy-frontend:
#          requires:
#            - deploy-infrastructure
#
#      - smoke-test:
#          requires:
#            - deploy-backend
#            - deploy-frontend
#
#      - cloudfront-update:
#          requires:
#            - smoke-test
#
#      - cleanup:
#          requires:
#            - cloudfront-update